/*----------------------------------------------------------------
 *  Author:        Ketan Nayak
 *  Written:       2/9/2015
 *
 *  Purpose:  Create a generic data type Deque
 *  Detail:  A double-ended queue or deque (pronounced "deck") is a generalization 
 *  of a stack and a queue that supports inserting and removing items from either 
 *  the front or the back of the data structure
 *  Implementation: Using a doubly-linked list
 *  
 *  Assignment here: http://coursera.cs.princeton.edu/algs4/assignments/queues.html
 *  Check-list here: http://coursera.cs.princeton.edu/algs4/checklists/queues.html
 *----------------------------------------------------------------*/
import java.util.Iterator;

public class Deque<Item> implements Iterable<Item> {
	
	private Node first = null; //Stores the first node of the linked list
	private Node last = null; //Stores the last node of the linked list
	private int N; //Stores the current size of the linked list
	
	//Implements a doubly linked list
	private class Node{
		Item item;
		Node next;
		Node previous;
	}
	
	public Deque(){
		
	}
	
	public boolean isEmpty(){
		return first.next == null && last.previous == null;
	}

	public int size(){
		
	}
	
	//Add item to the start of the list
	public void addFirst(Item item){
		
		Node oldfirst = first;
		first = new Node();
		first.item = item;
		first.next = oldfirst;
		N++;
	}
	
	//Add item to the end of the list
	public void addLast(Item item){
		
		Node oldlast = last;
		last = new Node();
		last.item = item;
		last.next = null;
		if (isEmpty()) first = last;
		else oldlast.next = last;
		N++;	
	}
	
	public Item removeFirst(){
		
		Item item = first.item;
		first = first.next;
		if (isEmpty()) last = null;
		N--;
		return item;	
	}
	
	public Item removeLast(){
		
		Item item = last.item;
		
	}
	
	public Iterator<Item> iterator(){
		return new ListIterator();	
	}
	
	private class ListIterator implements Iterator<Item>
	{
		private Node current = first;
	
		public boolean hasNext(){ 
			return current != null; 
		}
		
		public void remove() { }
		
		public Item next()
		{
			Item item = current.item;
			current = current.next;
			return item;
		}
	}
	
	
	public static void main(String args[]){
		
	}
	
	
}
